version: "2.1"
services:
  foolstack-db:
    image: suika/foolstack:percona
    container_name: foolstack-db
    restart: always
    networks:
      - foolstack
    environment:
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
    volumes:
      - ff-db:/var/lib/mysql
      - ff-db-logs:/var/log/mysql
  foolstack-phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: foolstack-phpmyadmin
    restart: always
    networks:
      - foolstack
    depends_on:
      foolstack-db:
        condition: service_healthy
    environment:
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
      - "PMA_HOST=foolstack-db"
      - "PMA_ABSOLUTE_URI=https://${PHPMYADMIN_DOMAIN}/"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.phpmyadmin-knot.entrypoints=http"
      - "traefik.http.routers.phpmyadmin-knot.rule=Host(`${PHPMYADMIN_DOMAIN}`)"
      - "traefik.http.middlewares.phpmyadmin-knot-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.phpmyadmin-knot.middlewares=phpmyadmin-knot-https-redirect"
      - "traefik.http.routers.phpmyadmin-knot-secure.entrypoints=https"
      - "traefik.http.routers.phpmyadmin-knot-secure.rule=Host(`${PHPMYADMIN_DOMAIN}`)"
      - "traefik.http.middlewares.phpmyadmin-knot-auth.basicauth.usersfile=/auth/.htpasswd"
      - "traefik.http.routers.phpmyadmin-knot-secure.middlewares=phpmyadmin-knot-auth"
      - "traefik.http.routers.phpmyadmin-knot-secure.tls=true"
      - "traefik.http.routers.phpmyadmin-knot-secure.tls.certresolver=knot-resolver-dns"
      - "traefik.http.routers.phpmyadmin-knot-secure.service=foolstack-phpmyadmin"
      - "traefik.http.services.foolstack-phpmyadmin.loadbalancer.server.port=80"
      - "traefik.docker.network=proxy"
  foolstack-php:
    image: suika/foolstack:php
    container_name: foolstack-php
    restart: always
    networks:
      - foolstack
    depends_on:
      foolstack-db:
          condition: service_healthy
      foolstack-redis:
          condition: service_healthy
    volumes:
      - ff-foolframe-temp:/var/www/foolfuuka/public/foolframe/foolz
      - ff-foolfuuka-temp:/var/www/foolfuuka/public/foolfuuka/foolz
      - ff-foolfuuka-conf:/var/www/foolfuuka/app/foolz/foolfuuka/config
      - ff-foolframe-conf:/var/www/foolfuuka/app/foolz/foolframe/config
      - ff-foolframe-logs:/var/www/foolfuuka/app/foolz/foolframe/logs
#      - ff-boards:/var/www/foolfuuka/public/foolfuuka/boards # uncomment for image uploads by foolfuuka
  foolstack-nginx:
    build: ./nginx
    container_name: foolstack-nginx
    restart: always
    networks:
      - foolstack
    depends_on:
      foolstack-db:
        condition: service_healthy
      foolstack-php:
        condition: service_healthy
      foolstack-redis:
        condition: service_healthy
    volumes:
      - ff-foolframe-temp:/var/www/foolfuuka/public/foolframe/foolz:ro
      - ff-foolfuuka-temp:/var/www/foolfuuka/public/foolfuuka/foolz:ro
      - ff-boards:/var/www/foolfuuka/public/foolfuuka/boards:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.knot.entrypoints=http"
      - "traefik.http.routers.knot.rule=Host(`${MAIN_DOMAIN}`)"
      - "traefik.http.middlewares.knot-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.knot.middlewares=knot-https-redirect"
      - "traefik.http.routers.knot-secure.entrypoints=https"
      - "traefik.http.routers.knot-secure.rule=Host(`${MAIN_DOMAIN}`)"
      - "traefik.http.middlewares.knot-auth.basicauth.usersfile=/auth/.htpasswd"
      - "traefik.http.routers.knot-secure.middlewares=knot-auth"
      - "traefik.http.routers.knot-secure.tls=true"
      - "traefik.http.routers.knot-secure.tls.certresolver=knot-resolver-dns"
      - "traefik.http.routers.knot-secure.service=foolstack-nginx"
      - "traefik.http.services.foolstack-nginx.loadbalancer.server.port=80"
      - "traefik.docker.network=proxy"
  traefik:
    image: traefik:v2.2
    container_name: traefik
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.http.address=:80"
      - "--entryPoints.https.address=:443"
      - "--certificatesresolvers.knot-resolver-dns.acme.dnschallenge=true"
      - "--certificatesresolvers.knot-resolver-dns.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.knot-resolver-dns.acme.email=${CF_API_EMAIL}"
      - "--certificatesresolvers.knot-resolver-dns.acme.storage=/acme/acme.json"
    environment: 
      - "CF_API_EMAIL=${CF_API_EMAIL}"
      - "CF_API_KEY=${CF_API_KEY}"
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/acme:/acme
      - ./.htpasswd:/auth/.htpasswd
      - ./.podcast_htpasswd:/auth/.podcast_htpasswd
    labels:
      - "traefik.http.routers.traefik.tls.domains[0].main=${MAIN_DOMAIN}"
      - "traefik.http.routers.traefik.tls.domains[0].sans=*.${MAIN_DOMAIN}"
      - "traefik.http.routers.traefik.tls.certresolver=knot-resolver-dns"
    networks:
      - foolstack
      - proxy
  foolstack-redis:
    container_name: foolstack-redis
    image: healthcheck/redis
    restart: always
    networks:
      - foolstack
    volumes:
      - ff-redis:/data
  foolstack-scraper:
    build: ./hayden # :asagi :eve :hayden
    container_name: foolstack-scraper
    restart: always
    networks:
      - foolstack
    depends_on:
      foolstack-db:
        condition: service_healthy
    environment:
      - SCRAPER_DOWNLOAD_MEDIA=True     # true/false if hayden, True/False if eve
      - SCRAPER_DOWNLOAD_THUMBS=True    # true/false if hayden, True/False if eve
    volumes:
      - ./data/hayden/:/hayden/data/
      - ff-boards:/boards
  foolstack-sphinx:
    image: suika/foolstack:manticore
    container_name: foolstack-sphinx
    restart: always
    networks:
      - foolstack
    depends_on:
      foolstack-db:
        condition: service_healthy
    volumes:
      - ff-sphinx-data:/var/lib/manticore
      - ff-sphinx-logs:/var/log/manticore
  podcast-tinyfile:
    image: tigerdockermediocore/tinyfilemanager-docker
    container_name: podcast-tinyfile
    restart: always
    networks: 
      - foolstack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.podcast-knot.entrypoints=http"
      - "traefik.http.routers.podcast-knot.rule=Host(`${PODCAST_DOMAIN}`)"
      - "traefik.http.middlewares.podcast-knot-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.podcast-knot.middlewares=podcast-knot-https-redirect"
      - "traefik.http.routers.podcast-knot-secure.entrypoints=https"
      - "traefik.http.routers.podcast-knot-secure.rule=Host(`${PODCAST_DOMAIN}`)"
      - "traefik.http.middlewares.podcast-knot-auth.basicauth.usersfile=/auth/.podcast_htpasswd"
      - "traefik.http.routers.podcast-knot-secure.middlewares=podcast-knot-auth"
      - "traefik.http.routers.podcast-knot-secure.tls=true"
      - "traefik.http.routers.podcast-knot-secure.tls.certresolver=knot-resolver-dns"
      - "traefik.http.routers.podcast-knot-secure.service=podcast-tinyfile"
      - "traefik.http.services.podcast-tinyfile.loadbalancer.server.port=80"
      - "traefik.docker.network=proxy"
    volumes:
      - ./data/podcast:/data
volumes:
  ff-foolframe-temp:     # FoolFrame generated content on the fly via php
    driver: local
  ff-foolfuuka-temp:     # FoolFuuka generated content on the fly via php
    driver: local
  ff-foolframe-logs:     # FoolFrame logs
    driver: local
  ff-foolfuuka-conf:     # Persistent configs
    driver: local
  ff-foolframe-conf:     # Persistent configs
    driver: local
  ff-db:                 # Percona DB
    driver: local
  ff-db-logs:            # Percona DB Logs
    driver: local
  ff-sphinx-data:        # MantiCore DB
    driver: local
  ff-sphinx-logs:        # MantiCore Logs
    driver: local
  ff-boards:             # Downloaded images and thumbs
    driver: local
  ff-redis:              # Redis
    driver: local
networks:
  foolstack:
    name: foolstack
  proxy:
    external: true
